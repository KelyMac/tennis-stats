#include <Arduino_LSM9DS1.h>
#include <ArduinoBLE.h>
#include <Arduino_LSM9DS1.h>
 
 
//----------------------------------------------------------------------------------------------------------------------
// BLE UUIDs
//----------------------------------------------------------------------------------------------------------------------
 
#define BLE_UUID_TEST_SERVICE               "9A48ECBA-2E92-082F-C079-9E75AAE428B1"
#define BLE_UUID_ACCELERATION               "2713"
#define BLE_UUID_COUNTER                    "1A3AC130-31EE-758A-BC50-54A61958EF81"
#define BLE_UUID_RESET_COUNTER              "FE4E19FF-B132-0099-5E94-3FFB2CF07940"
 
//----------------------------------------------------------------------------------------------------------------------
// BLE
//----------------------------------------------------------------------------------------------------------------------
 
BLEService testService( BLE_UUID_TEST_SERVICE );
BLEFloatCharacteristic accelerationCharacteristicX( BLE_UUID_ACCELERATION, BLERead | BLENotify );
BLEFloatCharacteristic accelerationCharacteristicY( BLE_UUID_ACCELERATION, BLERead | BLENotify );
BLEFloatCharacteristic accelerationCharacteristicZ( BLE_UUID_ACCELERATION, BLERead | BLENotify );BLEFloatCharacteristic accelerationCharacteristicX2( BLE_UUID_ACCELERATION, BLERead | BLENotify );
BLEFloatCharacteristic accelerationCharacteristicY2( BLE_UUID_ACCELERATION, BLERead | BLENotify );
BLEFloatCharacteristic accelerationCharacteristicZ2( BLE_UUID_ACCELERATION, BLERead | BLENotify );
BLEUnsignedLongCharacteristic counterCharacteristic( BLE_UUID_COUNTER, BLERead | BLENotify );
BLEBoolCharacteristic resetCounterCharacteristic( BLE_UUID_RESET_COUNTER, BLEWriteWithoutResponse );
 
 
 
 
void setup()
{
  Serial.begin( 9600 );
  //  while ( !Serial );
 
 
  if ( !IMU.begin() )
  {
    Serial.println( "Failed to initialize IMU!" );
    while ( 1 );
  }
  Serial.print( "Accelerometer sample rate = " );
  Serial.print( IMU.accelerationSampleRate() );
  Serial.println( " Hz" );
 
  if( setupBleMode() )
  {
    Serial.println( “working” );
  }
  if (!IMU.begin()){
    Serial.println("Failed to initialize MPU6050");
    while(1){
      delay(10);
    }
 
} // setup
 
 
void loop()
{
  static unsigned long counter = 0;
  static long previousMillis = 0;
 
  // listen for BLE peripherals to connect:
  BLEDevice central = BLE.central();
 
  if ( central )
  {
    Serial.print( "Connected to central: " );
    Serial.println( central.address() );
 
    while ( central.connected() )
    {
      if( resetCounterCharacteristic.written() )
      {
        counter = 0;
      }
 
      long interval = 2000;
      unsigned long currentMillis = millis();
      if( currentMillis - previousMillis > interval )
      {
        previousMillis = currentMillis;
 
        Serial.print( "Central RSSI: " );
        Serial.println( central.rssi() );
 
        if( central.rssi() != 0 )
        {
          float accelerationX, accelerationY, accelerationZ,  RotationX,RotationY,RotationZ;
          if ( IMU.accelerationAvailable() )
          {
            IMU.readAcceleration( accelerationX, accelerationY, accelerationZ );
            accelerationCharacteristicX.writeValue( accelerationX );
            accelerationCharacteristicY.writeValue( accelerationY );
            accelerationCharacteristicZ.writeValue( accelerationZ );
          if (IMU.gyroscopeAvailable()) {
            IMU.readGyroscope(RotationX, RotationY, RotationZ);
            gyroscopeCharacteristicX.writeValue( RotationX);
            gyroscopeCharacteristicY.writeValue( RotationY);
            gyroscopeCharacteristicZ.writeValue( RotationZ);
 
          }
 
          counter++;
          counterCharacteristic.writeValue( counter );
        }
       
      } // interval
    } // while connected
 
    Serial.print( F( "Disconnected from central: " ) );
    Serial.println( central.address() );
  } // if central
} // loop
 
 
 
bool setupBleMode()
{
  if ( !BLE.begin() )
  {
    return false;
  }
 
  // set advertised local name and service UUID:
  BLE.setDeviceName( "Arduino Nano 33 BLE" );
  BLE.setLocalName( "Arduino Nano 33 BLE" );
  BLE.setAdvertisedService( testService );
 
  // BLE add characteristics
  testService.addCharacteristic( accelerationCharacteristicX );
  testService.addCharacteristic( accelerationCharacteristicY );
  testService.addCharacteristic( accelerationCharacteristicZ );
  testService.addCharacteristic( gyroscopeCharacteristicX );
  testService.addCharacteristic( gyroscopeCharacteristicY );
  testService.addCharacteristic( gyroscopeCharacteristicZ );
 
  testService.addCharacteristic( counterCharacteristic );
  testService.addCharacteristic( resetCounterCharacteristic );
 
  // add service
  BLE.addService( testService );
 
  // set the initial value for the characeristic:
  accelerationCharacteristic.writeValue( 0.0);
  accelerationCharacteristicY.writeValue( 0.0);
  accelerationCharacteristicZ.writeValue( 0.0);
  gyroscopeCharacteristicX.writeValue(0.0 );
  gyroscopeCharacteristicY.writeValue( 0.0);
  gyroscopeCharacteristicZ.writeValue( 0.0);
  counterCharacteristic.writeValue( 0 );
 
  // start advertising
  BLE.advertise();
 
  return true;
}
